Yummy is yet another Winamp clone.
It supports Winamp plugins, services, classic skins and modern skins.
It does NOT depend on GTK+, Qt or any other toolkit.

Compiling
=========

dependencies for building:
gcc (the target MUST be 32-bit for compatibility with plugins)
g++ (for OLE)
pkg-config
make
libpng-dev, expat-dev (for modern skin engine)
libx11-dev, libxext-dev (for GNU/Linux only)

optional dependencies:
libavcodec-dev, libavformat-dev (for in_libav plugin)
libavfilter-dev (for dsp_avfilter plugin)
libao-dev (for out_ao plugin)

Create a '.config' file in the build directory. Copy a model with the same name
from the source directory for default configuration.

Hacking
=======

* cheese: compatibility layer for winamp services.
* player: GUI and main entry point.
* plugins: components to be loaded dynamically on load time.

Managing Dependencies and Portability
-------------------------------------

The build system uses autotools to detect the toolchain configurations
and dependencies. To change them, use the configure.ac file.
Try not to touch Makefile.in and Ubuild files to make it usable in other
projects.

Type the following commands to create a configure script. autotools and
automake are necessary.

autoconf -vfi
automake --add-missing

Even though the build system does NOT use automake at all, it is necessary
to create auxiliary files that autoconf deems to be necessary. Otherwise
you will have to install them manually. Those files are: install-sh,
config.sub and config.guess. They are placed in the build-aux directory.

Tips
----

* When creating conditionals in configure.ac, use 'test' instead of '['
because it conflicts with the M4 macro processor.
* autoconf's AC_CHECK_LIB does not detect stdcall.

Ubuild
------

Yummy uses its own build system called Ubuild. It was inspired by the
Kbuild system used to build the Linux kernel.

To compile one or more files, create a file called 'Makefile.ubuild'.
The language used is the same used in Makefile files. Then use the
following variables.

obj-y (specifies the source files to link in the final program)
obj-m (specifies the source files to build as separate modules)
xxx_cflags and xxx_cppflags (flags to build the xxx file)
xxx_deps (specifies additional arguments at link time such as libraries)
subdirs-y (specifies subdirectories to be built)

Here is one example of how to build and link a file to the final program.

obj-y += test.o

You can create a variable in the '.config' file to control weather a set
of files will be build by defining a variable like in this example.

obj-$(MY_VAR) += test.o
